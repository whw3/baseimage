#!/bin/bash
clear
BASEDIR=$(cd "$( dirname "$0" )" && pwd)
BASE_APPS="wget bash bash-completion nano git tzdata"
ALPINE_APPS="gnupg"
RPI_APPS="gnupg2 dirmngr"
echo "BASEDIR = $BASEDIR" > env_make
###
### Check Pre-requistites
###
if  [[ -z "$(which jq)" ]]; then
    whiptail --title "Missing Required Application" --yesno "jq is required for this script to function.\nShould I install it for you?" 8 48 3>&1 1>&2 2>&3 || exit 1;
    apt-get update
    apt-get install -y jq
fi
if  [[ -z "$(which gpg)" ]]; then
    whiptail --title "Missing Required Application" --yesno "gpg required for this script to function.\nShould I install it for you?" 8 48 3>&1 1>&2 2>&3 || exit 1;
    apt-get update
    apt-get install -y gpgv2
fi
#this really covers yaml2json, but having docker-compose is good too ;)
if  [[ -z "$(which docker-compose)" ]]; then
    whiptail --title "Missing Required Application" --yesno "docker-compose is required for this script to function.\nShould I install it for you?" 8 48 3>&1 1>&2 2>&3 || exit 1;
    apt-get -y install python-pip
    pip install pip --upgrade
    apt-get -y remove python-pip
    pip install docker-compose
    pip install -U requests==2.11.1
fi
###
### Set Timezone
###
TZ=""
while [ -z "$TZ" ]
do
    if [[ -r TIMEZONE ]]; then
        source TIMEZONE
    elif [[ -r /etc/timezone ]]; then
        TZ=$(</etc/timezone)
    else
        TZ="America/Chicago"
    fi
    TZ=$(whiptail --inputbox "Default timezone" 8 78 "$TZ" --title "WHW3 BaseImage Builder" 3>&1 1>&2 2>&3) || exit 1
    if [[ "$(grep -c -w "$TZ" zone.csv )" != "1" ]]; then
        TIMEZONES=( $(cut -d, -f3 < zone.csv | sort | sed 's/\"//g' | awk '!/^ / && NF {print $1 " [] off"}') )
        TZ=$(whiptail --title "Timezone Config" --radiolist --separate-output "Select Timezone" 20 48 12 "${TIMEZONES[@]}" 3>&1 1>&2 2>&3) || exit 1;
    fi
done
echo "export TZ=\"$TZ\"" > TIMEZONE
###
### Set User-defined Apps
###
BASE_XTRA=""
while [ -z "$BASE_XTRA" ]
do
    [[ -r BASE_XTRA ]] && source BASE_XTRA || BASE_XTRA="curl ca-certificates"
    BASE_XTRA=$(whiptail --inputbox "Default Applications" 8 78 "$BASE_XTRA" --title "WHW3 BaseImage Builder" 3>&1 1>&2 2>&3) || exit 1;
done
echo "export BASE_XTRA=\"$BASE_XTRA\"" > BASE_XTRA
###
### Check for latest s6-overlay and download
###
[[ -f s6-tags.json ]] && rm s6-tags.json
wget -qO s6-tags.json https://api.github.com/repos/just-containers/s6-overlay/tags
eval "$(jq -r '.[0] | @sh "S6_VERSION=\(.name)"' s6-tags.json )"
[[ ! -f s6-overlay-$S6_VERSION-armhf.tar.gz ]] && \
    wget -O "s6-overlay-$S6_VERSION-armhf.tar.gz" "https://github.com/just-containers/s6-overlay/releases/download/$S6_VERSION/s6-overlay-armhf.tar.gz"
###
### Setup rootfs
###
mkdir -p whw3/{alpine,rpi,buildpack-deps}
echo "$TZ" > rootfs/etc/timezone
mkdir -p rootfs/usr/local/bin
cp -a rootfs whw3/alpine
cp -a rootfs whw3/rpi
tar xz -C "whw3/alpine/rootfs" -f "s6-overlay-$S6_VERSION-armhf.tar.gz"
cp -a "s6-overlay-$S6_VERSION-armhf.tar.gz" whw3/rpi
cp -a "s6-overlay-$S6_VERSION-armhf.tar.gz" whw3/buildpack-deps
cp -a zone.csv whw3/alpine/rootfs/root/
chmod 0755 01-docker-entrypoint.sh
cp -a 01-docker-entrypoint.sh whw3/alpine/rootfs/etc/cont-init.d
cp -a 01-docker-entrypoint.sh whw3/rpi
cp -a 01-docker-entrypoint.sh whw3/buildpack-deps
chmod 0700 tzconfig*
chmod 0700 ./*-install
cp -a tzconfig.alpine whw3/alpine/rootfs/usr/local/bin/tzconfig
cp -a apk-install whw3/alpine/rootfs/usr/local/bin/
cp -a tzconfig.rpi whw3/rpi/rootfs/usr/local/bin/tzconfig
cp -a apt-install whw3/rpi/rootfs/usr/local/bin/
###
### Configure Alpine
###
if [[ ! $(gpg --fingerprint 293ACD0907D9495A 2>/dev/null) ]] ; then
    echo "Importing NCOPA key"
    gpg --import ncopa.asc
fi
BUILD="whw3/alpine/build.sh"
echo "#!/bin/bash" > $BUILD
NCOPA_FPR=$( gpg --with-colons --fingerprint 293ACD0907D9495A 2>/dev/null | grep fpr | cut -d ':' -f 10 )
TARGET_LIST=($(jq -r '.[]| "\(.tag)"' alpine_versions.json))
MIRROR="http://dl-cdn.alpinelinux.org/alpine"
PACKAGES="alpine-baselayout,alpine-keys,apk-tools,libc-utils,${BASE_APPS// /,},${ALPINE_APPS// /,}"
echo "${TARGET_LIST[@]}"
for RELEASE in "${TARGET_LIST[@]}"; do
    BRANCH="$(jq -r '.[]|select(.tag == "'$RELEASE'")|.branch' alpine_versions.json)"
    [[ -f latest-releases.yaml ]] && rm latest-releases.yaml
    wget -q "https://nl.alpinelinux.org/alpine/$BRANCH/releases/armhf/latest-releases.yaml"
    ALPINE_VERSION=$(./yaml2json.py < latest-releases.yaml | jq -r '.[]|select(.flavor == "alpine-minirootfs")|.version')
    ALPINE_BRANCH=$(./yaml2json.py < latest-releases.yaml | jq -r '.[]|select(.flavor == "alpine-minirootfs")|.branch')

    [[ ! -f alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz ]] && \
        wget "https://nl.alpinelinux.org/alpine/$ALPINE_BRANCH/releases/armhf/alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz"

    [[ ! -f alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz.sha256 ]] && \
        wget -q "https://nl.alpinelinux.org/alpine/$ALPINE_BRANCH/releases/armhf/alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz.sha256"

    [[ ! -f alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz.asc ]] && \
        wget -q "https://nl.alpinelinux.org/alpine/$ALPINE_BRANCH/releases/armhf/alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz.asc"

    if [[  $(sha256sum -c  "alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz.sha256") ]] ; then
        echo "Checksum: OK"
    else
        echo "Checksum: INVALID...Build Terminated"
        exit 2
    fi

    gpg --verify "alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz.asc" "alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz"  &>SIGNATURE
    FPR=$(grep fingerprint SIGNATURE|sed 's/Primary key fingerprint: //;s/ //g')
    rm SIGNATURE
    if [[ "$FPR" = "$NCOPA_FPR" ]]; then
        echo "Signature: OK"
    else
        echo "Signature: Failed Valitdation...Build Terminated"
        exit 2
    fi
    REPO="whw3/alpine/$ALPINE_BRANCH"
    mkdir -p "$REPO"
    cp -a "alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz" "$REPO"
    cp -a "s6-overlay-$S6_VERSION-armhf.tar.gz" "$REPO"
    cp -a "whw3/alpine/rootfs" "$REPO"
    cat << EOF > "$REPO/options"
export RELEASE="$ALPINE_BRANCH"
export MIRROR="$MIRROR"
export PACKAGES="$PACKAGES"
export BUILD_OPTIONS=(-b -s -t $TZ -r $ALPINE_BRANCH -m \$MIRROR -p \$PACKAGES)
EOF

    cat << EOF > "$REPO/Dockerfile"
FROM scratch
ADD alpine-minirootfs-$ALPINE_VERSION-armhf.tar.gz /
COPY rootfs /
RUN apk-install $BASE_APPS $BASE_XTRA $ALPINE_APPS
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime && exit 0 ; exit 1
RUN apk del tzdata
ENTRYPOINT ["/init"]
CMD ["/bin/bash"]
EOF
    echo "cd $BASEDIR/$REPO" >> $BUILD
    echo "docker build -t whw3/alpine:$ALPINE_VERSION -t whw3/alpine:$RELEASE ." >> $BUILD
done
echo "docker tag whw3/alpine:$ALPINE_VERSION whw3/baseimage:alpine" >> $BUILD
rm -rf "$BASEDIR/whw3/alpine/rootfs"
chmod +x $BUILD
###
### Configure Raspbian
###
echo "Refreshing resin/rpi-raspbian..."
#docker rmi -f resin/rpi-raspbian
docker pull resin/rpi-raspbian:latest
REPO="whw3/rpi"
### build ###
BUILD="whw3/rpi/build.sh"
cat << EOB > $BUILD
#!/bin/bash
cd $BASEDIR/$REPO
cat << EOF > "Dockerfile"
FROM resin/rpi-raspbian
COPY rootfs /
RUN apt-install $BASE_APPS $BASE_XTRA $RPI_APPS
RUN cp /usr/share/zoneinfo/$TZ /etc/localtime && exit 0 ; exit 1
CMD ["/bin/bash"]
EOF

docker build -t whw3/rpi:latest -t whw3/baseimage:rpi .

cat << EOF > Dockerfile
FROM whw3/rpi
ADD s6-overlay-$S6_VERSION-armhf.tar.gz /
COPY 01-docker-entrypoint.sh /etc/cont-init.d
RUN chmod +x /etc/cont-init.d/01-docker-entrypoint.sh
ENTRYPOINT ["/init"]
EOF
docker build -t whw3/rpi:s6 -t whw3/rpi-s6:latest -t whw3/baseimage:rpi-s6 .

cat << EOF > Dockerfile
FROM whw3/rpi
RUN echo 'deb http://deb.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/backports.list
EOF

docker build -t whw3/rpi:backports -t whw3/rpi-backports .

cat << EOF > Dockerfile
FROM whw3/rpi-s6
RUN echo 'deb http://deb.debian.org/debian jessie-backports main' > /etc/apt/sources.list.d/backports.list
EOF

docker build -t whw3/rpi-s6:backports -t whw3/rpi-s6-backports .

EOB
chmod +x $BUILD
###
### Configure Buildpack-deps
###
cd "$BASEDIR"
echo "BASEDIR:$BASEDIR"
# Always remove and refresh
REPO="buildpack-deps.git"
[[ -d  "$BASEDIR/$REPO" ]] &&  \
  rm -rf "$BASEDIR/$REPO"
git clone https://github.com/docker-library/buildpack-deps.git $REPO

REPO="whw3/buildpack-deps"
cp -a buildpack-deps.git/jessie/* "$REPO"

### patch ###
cd "$BASEDIR/$REPO"
sed -i 's_FROM debian:jessie_FROM whw3/rpi_' ./curl/Dockerfile
sed -i 's/^RUN apt-get update \&\& apt-get install/RUN apt-get update \&\& apt-get upgrade \&\& apt-get install/' ./curl/Dockerfile
find . -name Dockerfile -exec sed -i 's_FROM buildpack-deps:jessie_FROM whw3/buildpack-deps:rpi_' {} +

### build ###
BUILD="$REPO/build.sh"
cd "$BASEDIR"
cat << EOB > $BUILD
#!/bin/bash
cd $BASEDIR/$REPO/curl
docker build -t whw3/buildpack-deps:rpi-curl -t whw3/buildpack-deps:curl .
cd ../scm
docker build -t whw3/buildpack-deps:rpi-scm -t whw3/buildpack-deps:scm .
cd ../
docker build -t whw3/buildpack-deps:rpi .
mv Dockerfile Dockerfile~

declare -a tags=("-curl" "-scm" "")
for tag in "\${tags[@]}"
do
    cat << EOF > Dockerfile
FROM whw3/buildpack-deps:rpi\$tag
ADD s6-overlay-$S6_VERSION-armhf.tar.gz /
COPY 01-docker-entrypoint.sh /etc/cont-init.d
RUN chmod +x /etc/cont-init.d/01-docker-entrypoint.sh
ENTRYPOINT ["/init"]
EOF
    _tag=\${tag//-/}
    _tag="\$_tag-s6"
    [[ -z \$tag ]] && _tag="latest"
    docker build -t whw3/buildpack-deps:rpi-s6\$tag -t whw3/buildpack-deps:\$_tag .
done
docker tag whw3/buildpack-deps:latest whw3/baseimage:buildpack-deps
rm Dockerfile
mv Dockerfile~ Dockerfile
EOB
chmod +x $BUILD
